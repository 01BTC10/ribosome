'use strict'
/*
Forked from: https://github.com/sustrik/ribosome/blob/master/examples/errors.dna

Copyright (c) 2014-2017 Martin Sustrik, 01BTC10  All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.

This generator produces definitions of POSIX errors,
an implementation of strerror(2) function
and a CMakeLists.txt to build the project.

Usage: ribosomejs errors.dna
       mkdir build
       cd build
       cmake ..
       make
       ./test_mystrerror

Output: myerrno.h
        mystrerror.c
        test_mystrerror.c
        CMakeLists.txt
*/

const errors = {
  EINVAL: 'Invalid value',
  EMFILE: 'Too many open files',
  EINTR: 'Interrupted by a signal',
  EADDRINUSE: 'Address already in use',
  EFAULT: 'Bad address'
}

function names(){
  for (let e in errors){
.#define @{e}
  }
}

function values(){
  let i = 0
  for(let e in errors) {
.    @{++i}
}
}

./!output('myerrno.h')
.@{names()} @{values()}
.
.const char *mystrerror(const int errnum);
./!output("mystrerror.c")
.#include "myerrno.h"
.
.const char *mystrerror(const int errnum) {
.  switch (errnum) {
for(let e in errors) {
.  case @{e}:
.    return "@{errors[e]}";
}
.  default:
.    return "Unknown error";
.  }
.}

./!output('test_mystrerror.c')
.#include <assert.h>
.#include <stdbool.h>
.#include <string.h>
.
.#include "myerrno.h"
.
.#define streq(s1, s2) (strcmp(s1, s2) == 0 ? true : false)
.
.int main(void) {
  let i = 0
.  assert(streq("Unknown error", mystrerror(@{i})));
  for(let e in errors) {
.  assert(streq("@{errors[e]}", mystrerror(@{++i}))); 
  }
.  assert(streq("Unknown error", mystrerror(@{++i})));
.
.  return 0;    
.}

./!output('CMakeLists.txt')
.cmake_minimum_required (VERSION 3.2)
.project (MyStrerror)
.set (CMAKE_EXPORT_COMPILE_COMMANDS 1)
.add_library(mystrerror STATIC mystrerror.c myerrno.h)
.add_executable(test_mystrerror test_mystrerror.c myerrno.h)
.target_link_libraries(test_mystrerror mystrerror)
